-module(scrabble).
-behaviour(gen_server).

-export([start_link/0, 
	register_player/1,
	register_player/2, 
	add_points/3,
	return_player/2, 
	play/1,
	finish_game/1]).

-export([init/1, handle_call/3, handle_cast/2, handle_info/2,
         terminate/2, code_change/3]).

-record(player, {name}).

%%%============================================================
%%% Client API

start_link() ->
    	gen_server:start_link(?MODULE, [], []).

%% Synchronous call

register_player(_) ->
	io:format("You need the PID: register_player(Pid, Name)~n").

register_player(Pid, Name) ->
   	gen_server:call(Pid, {register, Name}).

play(Pid) -> 
	gen_server:call(Pid, play).	

add_points(Pid,Name,Points) ->
	gen_server:call(Pid,{sum,Name,Points}).

%% This call is asynchronous
return_player(Pid, Player = #player{}) ->
    gen_server:cast(Pid, {return, Player}).

%% Synchronous call
finish_game(Pid) ->
    gen_server:call(Pid, terminate).

%%%============================================================
%%% Server functions

init([]) ->
	process_flag(trap_exit, true), 
	{ok, []}.

handle_call({register, Name}, _From, Players) ->
	NewPlayers = [Name | Players],
	{reply, Name, NewPlayers};

handle_call(play,_From,Players) ->
	io:format("Game is now starting~n"),
	io:format("The players are: ~p~n",[Players]),
	{reply,Players,Players};

handle_call({sum,Name,Points},_From,Players) ->
	io:format("~p~p~n",[Name,Points]),
	{reply,Name,Players}.

handle_call(terminate, _From, Players) ->
    	{stop, normal, ok, Players}.

handle_cast({return, Player = #player{}}, Players) ->
    	{noreply, [Player|Players]}.

handle_info(Msg, Players) ->
    	io:format("Unexpected message: ~p~n",[Msg]),
    	{noreply, Players}.

terminate(normal, Players) ->
    	[io:format("~p was set free.~n",[C#player.name]) || C <- Players],
    	ok.

code_change(_OldVsn, State, _Extra) ->
    	%% No change planned. The function is there for the behaviour,
    	%% but will not be used. Only a version on the next
    	{ok, State}. 

%%%============================================================
%%% Private functions

